I hope it will be helpful for myself and those reading this. <3

GIT : Global Infomation Tracker

Git Flow : init > add > commit > remote > push
But... if you already did, just do this : add > commit > push

init > branch -M main > remote add > add > commit > push

…or create a new repository on the command line
echo "# RRJ_text" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/pongsagorn-chumnankul/RRJ_text.git
git push -u origin main


…or push an existing repository from the command line
git remote add origin https://github.com/pongsagorn-chumnankul/RRJ_text.git
git branch -M main
git push -u origin main


## หลังจากเปลี่ยน branch แล้วจะแสดงข้อความคล้ายๆแบบนี้ขึ้นมา

git branch -m osu RRJ
git fetch origin
git branch -u origin/RRJ RRJ
git remote set-head origin -a

Ref GitHub
---------------------------------------------------------------------------------------------------------------------------------------
-m "Move"
-M "Move Force"
-u "set-upstream"
-r "remote"
-a "all"


git init 	เป็นคำสั่งที่มีไว้ใช้งานที่โฟลเดอร์งานนั้น เช่น
		$ cd workspace (ถ้าอยู่ในงานตัวเองแล้วก็ไม่ต้องสนใจ)
		$ git init
		การทำงานคือเข้าไปในโฟลเดอร์ workspace แล้วให้ git ทำงานที่ตำแหน่งปัจจุบัน ก็คือ workspace นั่นเอง


git add	ใช้สำหรับเพิ่มไฟล์เข้าไปใน stage (เป็นการระบุว่าต้องการที่จะสร้างความเปลี่ยนแปลงไฟล์ไหนใน git บ้าง) เช่น
		$ git add main.html
		หรือถ้าต้องการเพิ่มทั้งโฟลเดอร์
		$ git add .


git status	ใช้สำหรับตรวจสอบว่ามีไฟล์ไหนที่ยังไม่ได้ add หรือมีการเปลี่ยนแปลงแล้วยังไม่ถูกจัดการบ้าง
		$ git status


git reset	เป็นการย้อน version ไฟล์ให้กลับไปอยู่ในสภาพเดิมก่อนที่จะ add ไฟล์เข้าสู่ stage
		$ git reset


git commit	ยืนยันการเปลี่ยนแปลงไฟล์ที่ถูก add ลงใน stage โดยสามารถใส่ comment โดยการเติม -m ด้านหลัง เช่น
		$ git commit -m “change function b”

		// ความหมายที่อีกเว็บบอก "การเก็บประวัติของไฟล์ต่างๆ ในโปรเจ็คต์ที่อยู่ใน Local ส่วน -a หมายถึง All คือทั้งหมดที่มีการ
		เปลี่ยนแปลงหรือแก้ไข ส่วน -am หมายถึงต้องการใส่คอมเม้นข้อความด้วย"

git clone	เป็นการก้อปปี้โปรเจคจำลองมาจากโปรเจคหลัก โดยเราจะสามารถเปลี่ยนแปลงไฟล์ในโปรเจคจำลองนี้ได้โดยที่ไม่กระทบโปรเจคหลัก
		(ไฟล์จำลองที่เราทำการเปลี่ยนแปลงจะเรียกว่า local repository และไฟล์หลักที่อยู่คนละที่จะเรียกว่า remote repository)
		$ git clone


git push	เป็นการส่งไฟล์ที่ commit แล้วเข้าสู่ remote repository
		$ git push

		// ความหมายที่อีกเว็บบอก "คือการส่ง commit ที่อยู่ Local ไปยัง Remote"


git fetch	ใช้ตรวจสอบว่าไฟล์ ในlocal กับremote มีความแตกต่างกันหรือไม่ ไฟล์ไหนใหม่กว่า หรือล้าสมัยอยู่กี่ commit 
		(ซึ่งตรงนี้ comment จะช่วยเราได้มากว่า commit นี้เราทำอะไรลงไป เพราะฉะนั้นควร comment
		อยู่เสมอและต้องเขียนให้สื่อความหมาย)
		ChatGPT : เพื่อดึงการเปลี่ยนแปลงจากที่เก็บระยะไกลไปยังที่เก็บในเครื่องของคุณ
		$ git fetch

	****	หากลบรีโมต branch สำเร็จโดยใช้คำสั่ง git push แต่ branch ยังคงแสดงอยู่เมื่อคุณเรียกใช้คำสั่ง git branch -r คุณอาจต้องอัปเดตที่เก็บ Git ในเครื่องของคุณเพื่อแสดงการ			เปลี่ยนแปลงที่ทำกับรีโมตที่เก็บ สามารถทำได้โดยใช้คำสั่งต่อไปนี้

		$ git fetch --prune

		ตัวเลือก --prune บอกให้ Git ลบกิ่งก้านการติดตามระยะไกลที่ไม่มีอยู่บนรีโมทอีกต่อไป


git pull	เป็นการดึงไฟล์ที่มีการเปลี่ยนแปลงใน remote มาเปลี่ยนแปลงใน local ซึ่งเป็นการใช้คำสั่ง git fetch ตามด้วย git merge
		$ git pull

---------------------------------------------------------------------------------------------------------------------------------------
Branch และ คำสั่งที่ต้องใช้

git branch							เริ่มจากดู branch ที่มีอยู่ทั้งหมดด้วยคำสั่ง โดยปกติแล้วจะมี branch
								หลักอยู่เพียงอันเดียวคือ master

git branch my_new_branch				ถ้าเราจะสร้าง brach ขึ้นมาใหม่ พอลองดู brach ด้วยคำสั่ง “git branch”
								อีกครั้งก็จะพบว่ามีชื่อ my_new_branch เพิ่มขึ้นมาแล้ว

git checkout my_new_branch				ถ้าหากเราต้องการย้ายไป my_new_branch

git branch --delete som_branch_to_delete		ถ้าต้องการลบ branch ก็เพียงพิมพ์คำสั่ง

git branch -m <branch_name>				เปลี่ยนชื่อ branch เดิม (ต้องอยู่หน้า branch ที่ต้องการเปลี่ยนก่อนด้วยนะ)


## เพิ่มเติม

git ls-remote --heads origin <branch_name>	หากต้องการตรวจสอบว่ามีสาขาอยู่ในที่เก็บระยะไกลหรือไม่

---------------------------------------------------------------------------------------------------------------------------------------
Git -m / -M

ใน Git นั้น -m และ -M เป็นทั้งตัวเลือกที่ใช้กับคำสั่ง git branch แต่มีความหมายต่างกัน

ตัวเลือก -m ย่อมาจาก "move" และใช้เพื่อเปลี่ยนชื่อสาขาที่มีอยู่ ตัวอย่างเช่น หากคุณมีสาขาชื่อ "featureA"
และคุณต้องการเปลี่ยนชื่อเป็น "featureB" คุณจะใช้คำสั่งต่อไปนี้:

$ git branch -m featureA featureB

คำสั่งนี้จะเปลี่ยนชื่อสาขา "featureA" เป็น "featureB"

ในทางกลับกัน ตัวเลือก -M ย่อมาจาก "move force" และใช้เพื่อบังคับให้เปลี่ยนชื่อสาขา แม้ว่าชื่อใหม่จะมีอยู่แล้วก็ตาม
ตัวอย่างเช่น หากคุณมีสาขาชื่อ "featureA" และคุณต้องการเปลี่ยนชื่อเป็น "featureB" แต่มีสาขาชื่อ "featureB"อยู่แล้ว
คุณสามารถใช้คำสั่งต่อไปนี้:

$ git branch -M featureA featureB

คำสั่งนี้จะเปลี่ยนชื่อสาขา "featureA" เป็น "featureB" และแทนที่สาขา "featureB" ที่มีอยู่ด้วยชื่อเดียวกัน

โดยสรุป ข้อแตกต่างที่สำคัญระหว่าง -m และ -M ใน Git คือ -m ใช้เพื่อเปลี่ยนชื่อสาขา
ในขณะที่ -M ใช้เพื่อบังคับเปลี่ยนชื่อสาขา แม้ว่าชื่อใหม่จะมีอยู่แล้วก็ตาม

---------------------------------------------------------------------------------------------------------------------------------------
Git -u / --set upstream

ใน Git ตัวเลือก -u ย่อมาจาก "set upstream" เมื่อใช้กับคำสั่ง git push จะระบุ remote branch ที่จะ push 
และตั้งค่าเป็น upstream branch สำหรับ local branch.

ด้วยการตั้งค่า upstream branch ทำให้ Git สามารถทราบตำแหน่งที่จะ push การเปลี่ยนแปลงเมื่อคุณรัน git push ในอนาคต 
โดยที่คุณไม่ต้องระบุ remote และชื่อ branch ทุกครั้ง คุณสามารถเรียกใช้ git push และ Git จะพุชการเปลี่ยนแปลงไปยังสาขา upstream branch โดยอัตโนมัติ

ตัวอย่างวิธีใช้ -u กับคำสั่ง git push:

$ git push -u origin master

ในตัวอย่างนี้ origin คือชื่อของที่เก็บ remote และ master คือชื่อของสาขา local ที่คุณต้องการส่งไปยังที่เก็บ remote
ตัวเลือก -u บอกให้ Git ตั้งค่าสาขาหลักบนพื้นที่เก็บข้อมูลระยะไกลเป็นสาขาอัพสตรีมสำหรับสาขาหลักในพื้นที่

หลังจากรันคำสั่งนี้ คุณสามารถใช้ git push เพื่อพุชการเปลี่ยนแปลงไปยัง upstream branch ในอนาคต โดยไม่ต้องระบุชื่อ remote แดละ branch ทุกครั้ง

---------------------------------------------------------------------------------------------------------------------------------------
git remote ที่ใช้บ่อยที่สุด...บางส่วนอะนะ

git remote - คำสั่งนี้แสดงรายการที่เก็บระยะไกลทั้งหมดที่เกี่ยวข้องกับที่เก็บในเครื่องของคุณ

git remote add [remote_name] [remote_url] - คำสั่งนี้จะเพิ่มที่เก็บระยะไกลใหม่ไปยังที่เก็บในเครื่องของคุณ คุณต้องระบุชื่อสำหรับรีโมตและ URL

git remote remove [remote_name] - คำสั่งนี้จะลบที่เก็บระยะไกลออกจากที่เก็บในเครื่องของคุณ

git remote rename [old_name] [new_name] - คำสั่งนี้เปลี่ยนชื่อที่เก็บระยะไกล

git remote set-url [remote_name] [new_url] - คำสั่งนี้อัพเดต URL ของที่เก็บระยะไกล

git remote show [remote_name] - คำสั่งนี้แสดงข้อมูลเกี่ยวกับที่เก็บระยะไกล เช่น URL และสาขาที่ติดตาม

git remote prune [remote_name] - คำสั่งนี้จะลบการอ้างอิงในเครื่องไปยังสาขาระยะไกลที่ถูกลบออกจากที่เก็บระยะไกล

---------------------------------------------------------------------------------------------------------------------------------------
git commit --allow-empty -m "force commit"  คอมมิตแม้ว่าจะไม่มีการเปลี่ยนแปลง

---------------------------------------------------------------------------------------------------------------------------------------
problem

ห้ามลบตัว .git ออกจากไฟล์จัดเก็บของเราเพราะมันจะติด ERROR ที่เรียกได้ว่าต้องลบ Repository กันเลยทีเดียวเชียว
ก็คือเหมือนมันจะไม่เข้าใจว่าไอตัว Branch หรือ origin หรือ local ที่ถามหามันอยู่ตรงไหน
หลังจากที่ได้ลองหาวิธีแก้ด้วยการหาด้วยตัวเอง และถาม ChatGPT ด้วยก็ได้พบว่ามันเป็นวิธีแก้ที่แก้ได้ในกรณีที่
เราไม่ได้ไปลบตัว git init (.git ในโฟล์เดอร์จัดเก็บ) ออกไป
ซึ่งวิธีแก้ ณ ตอนนี้ที่มีอยู่คือ สร้างไฟล์จัดเก็บให้กับตัว Repository ที่เราต้องการที่จะเชื่อมกับตัวที่จัดเก็บในเว็บ Git Hub
แล้วก็อย่าไปลบออกสะล่ะเดียวจะได้สร้าง Repository ใหม่ EiEi

ลองแก้ซิ
